import TelegramBot from "node-telegram-bot-api";
import { PrismaClient } from "@prisma/client";
import { redis } from "./redis_db.js";
let prisma = new PrismaClient();

const token = "6075176198:AAFY27WzY2wSqJALsIlzEjHgbQtQ2J1epuU";
const bot = new TelegramBot(token, {
  polling: true,
});

await redis.create();
redis.client.on('connect', function(){
  console.log("Connected")
})


const instructions = `–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º? ü¶ù
    
üéÅ –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—Ö–æ–¥".

‚úÖ –î–∞–ª–µ–µ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
‚úÖ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.
‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ—á–∫–∏ —Å–±–æ—Ä–∞.
‚úÖ –ë—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ï—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —Ä–∞—Å—á–µ—Ç–æ–º, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", –∏–Ω–∞—á–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–ö". 
–ü—Ä–∏—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.


ü§ù –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞".
‚úÖ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏.
‚úÖ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏.
‚úÖ –î–æ–±–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏.
‚úÖ –ù–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"

üî• –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é".
‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
‚úÖ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏.
‚úÖ –ù–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"

üëï –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª".
‚úÖ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞. 
‚úÖ –í–≤–µ–¥–∏—Ç–µ –≤–≤–µ–¥–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞.
‚úÖ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞.
‚úÖ –ù–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å".

üìç –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É"
‚úÖ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ—á–∫–∏.
‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω–∞—è —Ç–æ—á–∫–∞.
‚úÖ –ù–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"

üì∞ –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å".
‚úÖ –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–î–∞–ª–µ–µ".
‚úÖ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏.
‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–î–∞–ª–µ–µ"
‚úÖ –ù–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"

‚úèÔ∏è –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞".
‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å. 
‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
‚úÖ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è, –æ–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã—à–µ.
‚úÖ –ù–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å".

‚Ü™Ô∏è –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é" –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "–í –º–µ–Ω—é".`;

const menu = [
  [{ text: "üéÅ –ù–æ–≤—ã–π –ø—Ä–∏—Ö–æ–¥", callback_data: "new_things" }],
  [{ text: "üî• –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é", callback_data: "new_sale" }],
  [{ text: "üëï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data: "new_material" }],
  [
    {
      text: "üìç –î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É",
      callback_data: "new_collection_point",
    },
  ],
  [{ text: "üì∞ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å", callback_data: "new_post" }],
  [
    {
      text: "üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/–ü—Ä–æ—Å–º–æ—Ç—Ä",
      callback_data: "editor_mode",
    },
  ],
];

function start(chatId) {
  bot.sendMessage(
    chatId,
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–æ—Ç–∞-–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ SMART-obmen!",
    {
      reply_markup: {
        keyboard: [["‚Ü™ –í –º–µ–Ω—é"], ["üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"]],
      },
    }
  );
  bot.sendMessage(chatId, instructions, {
    reply_markup: {
      inline_keyboard: menu,
    },
  });
}

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  start(chatId);
});

bot.onText(/–í –º–µ–Ω—é/, (msg) => {
  bot.sendMessage(msg.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", {
    reply_markup: {
      inline_keyboard: menu,
    },
  });
});

bot.onText(/–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è/, (msg) => {
  bot.sendMessage(msg.chat.id, instructions);
});

const addNewThing = async () => {};

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–µ—Å –ø—Ä–∏—Ö–æ–¥
 * @param {*} msg
 * @returns
 */
const sendUsersListKeyboard = async (msg) => {
  const users = await prisma.user.findMany();
  let buttons = [];

  for (let idx in users) {
    let user = users[idx];
    let role;
    if (user.role == "LOW") {
      role = "üîµ";
    } else if (user.role == "MEDIUM") {
      role = "üü¢";
    } else if (user.role == "HIGH") {
      role = "üî¥";
    } else if (user.role == "ADMIN") {
      role = "ADMIN";
    }

    const text = `${role} ${user.name} ${user.surname}
    (${user.phoneNumber})`;
    const callback_data = `user_select_${user.id}`;
    buttons.push([{ text: text, callback_data: callback_data }]);
  }

  buttons.push([{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_new_thing" }]);

  let opts = {
    reply_to_message: msg.message_id,
    reply_markup: JSON.stringify({
      inline_keyboard: buttons,
    }),
  };

  bot.sendMessage(msg.message.chat.id, "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", opts);

  return users;
};

const sendMaterialListKeyboard = async (msg) => {
  const materials = await prisma.material.findMany();
  let buttons = [];
  for (let idx in materials) {
    let material = materials[idx];
    const text = `${material.name}`;
    const callback_data = `material_select_${material.id}`;
    buttons.push([{ text: text, callback_data: callback_data }]);
  }

  buttons.push([{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_new_thing" }]);

  let opts = {
    reply_to_message: msg.message_id,
    reply_markup: JSON.stringify({
      inline_keyboard: buttons,
    }),
  };

  bot.sendMessage(msg.message.chat.id, "üëï –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª", opts);
};

const sentAskQuantity = async (msg) => {
  bot.sendMessage(
    msg.message.chat.id,
    "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª—á–µ—Å—Ç–≤–æ –ø—Ä–∏–Ω–µ—Å–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:",
    {
      reply_to_message_id: msg.message_id,
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_new_thing" }],
        ],
      },
    }
  );
};

const sendCollectionPointKeyboard = async (msg) => {
  const collectionPoints = await prisma.collectionPoint.findMany();
  let buttons = [];
  for (let idx in collectionPoints) {
    let point = collectionPoints[idx];
    const text = `${point.address}`;
    const callback_data = `collection_point_select_${point.id}`;
    buttons.push([{ text: text, callback_data: callback_data }]);
  }

  buttons.push([{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_new_thing" }]);

  let opts = {
    reply_to_message: msg.message_id,
    reply_markup: JSON.stringify({
      inline_keyboard: buttons,
    }),
  };

  bot.sendMessage(msg.message.chat.id, "üëï –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É —Å–±–æ—Ä–∞", opts);
};

const sendCalculatedPoints = async (msg) => {
  const materialId = Number(
    (await redis.getMaterialOfTheNewBatch(msg.message.chat.id)) || -1
  );
  const materialInfo = await prisma.material.findFirst({
    where: { id: materialId },
  });
  const pointsPerOne = materialInfo.points;
};

bot.on("callback_query", async (msg) => {
  const callback_data = msg.data;
  const chatId = msg.data.message.chat.id;

  // –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —á—Ç–æ-—Ç–æ –ø—Ä–∏–Ω–µ—Å
  if (callback_data.includes("user_select_")) {
    await redis.setUserWhoBringTheBatch(chatId, callback_data.split("_")[2]);
    await sendMaterialListKeyboard(msg);
  } else if (callback_data.includes("material_select_")) {
    await redis.setMaterialOfTheNewBatch(chatId, callback_data.split("_")[2]);
    await sendCollectionPointKeyboard(msg);
  } else if (callback_data.includes("collection_point_select_")) {
    await redis.setCollectionPointOfTheNewBatch(
      chatId,
      callback_data.split("_")[3]
    );
    await sendCalculatedPoints(msg);
  } else if (callback_data.includes("")) {
  }

  switch (callback_data) {
    case "new_things":
      await sendUsersListKeyboard(msg);
      const material = await selectMaterial(msg);
      break;
    case "new_sale":
      break;
    case "new_material":
      break;
    case "new_collection_point":
      break;
    case "new_post":
      break;
    case "editor_mode":
      break;
    default:
      break;
  }
});
